from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import random
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.environ["BOT_TOKEN"]

# –ì–ª–æ–±–∞–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏
words = {}
current_word = {}

# –ó—á–∏—Ç–∞—Ç–∏ —Å–ª–æ–≤–∞ –∑ —Ñ–∞–π–ª—É words.txt
def load_words(filename="words.txt"):
    result = {}
    try:
        with open(filename, encoding="utf-8") as f:
            for line in f:
                if ":" in line:
                    eng, ukr = line.strip().split(":", 1)
                    translations = [word.strip().lower() for word in ukr.split(",")]
                    result[eng.strip().lower()] = translations
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ª—ñ–≤: {e}")
    return result

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global words
    user_id = update.effective_user.id
    word = random.choice(list(words.keys()))
    current_word[user_id] = word
    await update.message.reply_text(f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–æ: {word}")

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answer = update.message.text.strip().lower()

    word = current_word.get(user_id)
    correct_answers = words.get(word, [])

    if not word or not correct_answers:
        # –ü—Ä–æ—Å—Ç–æ –æ–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–µ —Å–ª–æ–≤–æ, —è–∫ –Ω—ñ –≤ —á–æ–º—É –Ω–µ –±—É–≤–∞–ª–æ
        new_word = random.choice(list(words.keys()))
        current_word[user_id] = new_word
        await update.message.reply_text(f"üëâ –°–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É: {new_word}")
        return

    normalized_correct_answers = [ans.strip().lower() for ans in correct_answers]

    if answer in normalized_correct_answers:
        correct_responses = [
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ",
            "üéâ –ú–æ–ª–æ–¥–µ—Ü—å! –í—Å–µ –≤—ñ—Ä–Ω–æ!",
            "üß† –ö—Ä–∞—Å–∞–≤–∞! –¢–æ—á–Ω–æ –≤ —Ü—ñ–ª—å!",
            "üî• –¢–∞ —Ç–∏ —Ä–æ–∑—É–º–Ω–∏–∫! –í —è–±–ª—É—á–∫–æ!",
            "üòé –ú–æ–ª–æ–¥—á–∏–Ω–∫–∞",
            "üí™ –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏",
            "ü§ô –í–∞—É —Ç–∞ —Ç–∏ –∫—Ä—É—Ç–∏–π",
            "ü§å –ü–µ—Ä—Ñ–µ–∫—Ç–æ!",
            "ü§ì –¢–∏ —â–æ –≤—ñ–¥–º—ñ–Ω–Ω–∏–∫? –î–∏–≤–æ–≤–∏–∂–Ω–æ!!!",
            "üëå –û–ö",
            "üçæ –í—ñ–¥–∫—Ä–∏—é –ø–ª—è—à–∫—É –∑–∞ —Ç–µ–±–µ",
            "üç∑ –ü'—é –∑–∞ —Ç–≤–æ—î –∑–¥–æ—Ä–æ–≤'—è",
            "üåù –§–∞–π–Ω–æ",
            "üåö –ù—ñ—Ñ—ñ–≥–∞ —Å–æ–±—ñ, –≥—Ä–∞–º–æ—Ç–Ω–æ!",
            "üíôüíõ –£–∫—Ä–∞—ó–Ω–∞ –≥–æ—Ä–¥–∏—Ç–∏–º–µ—Ç—å—Å—è —Ç–æ–±–æ—é",
        ]
        await update.message.reply_text(random.choice(correct_responses))
    else:
        correct_display = ", ".join(correct_answers)
        incorrect_responses = [
            f"‚ùå –¢–ê–î–ï–ô! –¥—É–º–∞–π —Ç—Ä–æ—Ö–∏ü§°, –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_display}",
            f"üôÉ –ú–∏–º–æ! –ë—É–ª–æ —Ç—Ä–µ–±–∞: {correct_display}",
            f"üö´ –ù–µ –≤–≥–∞–¥–∞–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –±—É–¥–µ: {correct_display}",
            f"‚ö†Ô∏è –¢–∏ —Å–µ—Ä–π–æ–∑–Ω–æ –∑–∞—Ä–∞–∑? –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"ü§¨ –§—É –∞–∂ –≥–∏–¥–∫–æ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"ü•¥ –û—á—ñ –±–æ–ª—è—Ç—å –≤—ñ–¥ —Ç–∞–∫–æ–≥–æ... –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"‚õî –ú–µ–Ω—ñ –∑–∞ —Ç–µ–±–µ —Å–æ—Ä–æ–º–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"üíÄ –©–û–û–û–û??? –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"üí©üí©üí©üí©üí© –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"ü´µü´µü´µ –û—Å—å –Ω–µ–≤–¥–∞—Ö–∞, –•–ê –•–ê –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"ü©ª –ë–æ—Ç –ø—Ä–æ–≤—ñ–≤ –ú–†–¢... –¢–∞–º –ø—É—Å—Ç–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"‚ö∞Ô∏è –¢–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –ø–æ–º–µ—Ä–ª–∏. RIP. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"üóøüóøüóø –ù–µ–º–∞ —Å–ª—ñ–≤. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"üö´ –¢–∞–¥–µ–π –Ω–µ –ø–æ–∑–æ—Ä—Å—è, –≤—á–∏—Å—å —Ç—Ä–æ—Ö–∏. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"üß¨ –î–ù–ö –∞–Ω–∞–ª—ñ–∑ –ø–æ–∫–∞–∑–∞–≤: –≥–µ–Ω –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
        ]
        await update.message.reply_text(random.choice(incorrect_responses))

    # –û–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–µ —Å–ª–æ–≤–æ
    new_word = random.choice(list(words.keys()))
    current_word[user_id] = new_word
    await update.message.reply_text(f"\nüëâ –ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ: {new_word}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    global words
    words = load_words("words.txt")

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
