from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import random
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.environ["BOT_TOKEN"]

# –ì–ª–æ–±–∞–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏
words = {}
current_word = {}

# –ó—á–∏—Ç–∞—Ç–∏ —Å–ª–æ–≤–∞ –∑ —Ñ–∞–π–ª—É words.txt
def load_words(filename="words.txt"):
    result = {}
    try:
        with open(filename, encoding="utf-8") as f:
            for line in f:
                if ":" in line:
                    eng, ukr = line.strip().split(":", 1)
                    translations = [word.strip().lower() for word in ukr.split(",")]
                    result[eng.strip().lower()] = translations
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ª—ñ–≤: {e}")
    return result

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global words
    user_id = update.effective_user.id
    word = random.choice(list(words.keys()))
    current_word[user_id] = word
    await update.message.reply_text(f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–æ: {word}")

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answer = update.message.text.strip().lower()

    word = current_word.get(user_id, "")
    correct_answers = words.get(word, [])

    if not word or not correct_answers:
        await update.message.reply_text("‚ö†Ô∏è –Ø –Ω–µ –∑–Ω–∞—é, —è–∫–µ —Å–ª–æ–≤–æ —Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î—à. –ù–∞–ø–∏—à–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
        return

    if answer in correct_answers:
        responses = [
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ",
            "üéâ –ú–æ–ª–æ–¥–µ—Ü—å! –í—Å–µ –≤—ñ—Ä–Ω–æ!",
            "üß† –ö—Ä–∞—Å–∞–≤–∞! –¢–æ—á–Ω–æ –≤ —Ü—ñ–ª—å!",
            "üî• –¢–∞ —Ç–∏ —Ä–æ–∑—É–º–Ω–∏–∫!",
            "üòé –ú–æ–ª–æ–¥—á–∏–Ω–∫–∞",
            "üí™ –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏",
            "ü§ô –í–∞—É —Ç–∞ —Ç–∏ –∫—Ä—É—Ç–∏–π",
        ]
        await update.message.reply_text(random.choice(responses))
    else:
        correct_display = ", ".join(correct_answers)
        incorrect_responses = [
            f"‚ùå –ù—ñ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"üôÉ –ú–∏–º–æ! –¢—Ä–µ–±–∞: {correct_display}",
            f"ü©ª –ë–æ—Ç –ø—Ä–æ–≤—ñ–≤ –ú–†–¢... –¢–∞–º –ø—É—Å—Ç–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
            f"üíÄ –©–û–û–û–û??? –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_display}",
        ]
        await update.message.reply_text(random.choice(incorrect_responses))

    await start(update, context)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    global words
    words = load_words("words.txt")

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
