from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import random
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.environ["BOT_TOKEN"]

# –°–ª–æ–≤–Ω–∏–∫ —Å–ª—ñ–≤
words = {
    "keep": ["–∑–±–µ—Ä—ñ–≥–∞—Ç–∏", "–ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏"],
    "hurt": ["–ø–æ—à–∫–æ–¥–∏—Ç–∏"],
    "become": ["—Å—Ç–∞–≤–∞—Ç–∏"],
    "begin": ["–ø–æ—á–∏–Ω–∞—Ç–∏"],
    "bring": ["–ø—Ä–∏–Ω–æ—Å–∏—Ç–∏"],
    "buy": ["–∫—É–ø–ª—è—Ç–∏"],
    "catch": ["–∑–ª–æ–≤–∏—Ç–∏"],
    "choose": ["–≤–∏–±–∏—Ä–∞—Ç–∏"],
    "come": ["–ø—Ä–∏—Ö–æ–¥–∏—Ç–∏"],
    "cry": ["–ø–ª–∞–∫–∞—Ç–∏"],
    "dream": ["–º—Ä—ñ—è—Ç–∏"],
    "draw": ["–º–∞–ª—é–≤–∞—Ç–∏"],
    "drink": ["–ø–∏—Ç–∏"],
    "eat": ["—ó—Å—Ç–∏"],
    "fall": ["–ø–∞–¥–∞—Ç–∏"],
    "feel": ["–≤—ñ–¥—á—É–≤–∞—Ç–∏"],
    "fight": ["–±–∏—Ç–∏—Å—è"],
    "find": ["–∑–Ω–∞—Ö–æ–¥–∏—Ç–∏"],
    "fly": ["–ª—ñ—Ç–∞—Ç–∏"],
    "forget": ["–∑–∞–±—É–≤–∞—Ç–∏"],
    "forgive": ["–ø—Ä–æ–±–∞—á–∞—Ç–∏"],
    "feed": ["–≥–æ–¥—É–≤–∞—Ç–∏"],
    "get": ["–æ—Ç—Ä–∏–º–∞—Ç–∏"],
    "give": ["–¥–∞–≤–∞—Ç–∏"],
    "hide": ["—Ö–æ–≤–∞—Ç–∏"],
    "hear": ["—á—É—Ç–∏"],
    "hit": ["–≤–¥–∞—Ä—è—Ç–∏"],
    "hold": ["—Ç—Ä–∏–º–∞—Ç–∏"],
    "know": ["–∑–Ω–∞—Ç–∏"],
    "lay": ["–∫–ª–∞—Å—Ç–∏"],
    "learn": ["–¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è"],
    "leave": ["–∑–∞–ª–∏—à–∞—Ç–∏"],
    "let": ["–¥–æ–∑–≤–æ–ª—è—Ç–∏"],
    "lie": ["–±—Ä–µ—Ö–∞—Ç–∏"],
    "lose": ["–ø—Ä–æ–≥—Ä–∞–≤–∞—Ç–∏"],
    "make": ["—Ä–æ–±–∏—Ç–∏"],
    "lend": ["–ø–æ–∑–∏—á–∞—Ç–∏"],
    "mean": ["–º–∞—Ç–∏ –Ω–∞ —É–≤–∞–∑—ñ"],
    "meet": ["–∑—É—Å—Ç—Ä—ñ—á–∞—Ç–∏"],
    "pay": ["–ø–ª–∞—Ç–∏—Ç–∏"],
    "put": ["–∫–ª–∞—Å—Ç–∏"],
    "read": ["—á–∏—Ç–∞—Ç–∏"],
    "rid": ["–ø–æ–∑–±—É–≤–∞—Ç–∏—Å—è"],
    "say": ["–∫–∞–∑–∞—Ç–∏"],
    "see": ["–±–∞—á–∏—Ç–∏"],
    "seek": ["—à—É–∫–∞—Ç–∏"],
    "sell": ["–ø—Ä–æ–¥–∞–≤–∞—Ç–∏"],
    "send": ["–ø–æ—Å–∏–ª–∞—Ç–∏"],
    "shoot": ["—Å—Ç—Ä—ñ–ª—è—Ç–∏"],
    "show": ["–ø–æ–∫–∞–∑—É–≤–∞—Ç–∏"],
    "shut": ["–∑–∞–∫—Ä–∏–≤–∞—Ç–∏"],
    "sing": ["—Å–ø—ñ–≤–∞—Ç–∏"],
    "sit": ["—Å–∏–¥—ñ—Ç–∏"],
    "sleep": ["—Å–ø–∞—Ç–∏"],
    "speak": ["–≥–æ–≤–æ—Ä–∏—Ç–∏"],
    "spend": ["–≤–∏—Ç—Ä–∞—á–∞—Ç–∏"],
    "stand": ["—Å—Ç–æ—è—Ç–∏"],
    "steal": ["–∫—Ä–∞—Å—Ç–∏"],
    "swim": ["–ø–ª–∞–≤–∞—Ç–∏"],
    "take": ["–±—Ä–∞—Ç–∏"],
    "teach": ["–Ω–∞–≤—á–∞—Ç–∏"],
    "tell": ["—Ä–æ–∑–ø–æ–≤—ñ–¥–∞—Ç–∏"],
    "think": ["–¥—É–º–∞—Ç–∏"],
    "understand": ["—Ä–æ–∑—É–º—ñ—Ç–∏"],
    "throw": ["–∫–∏–¥–∞—Ç–∏"],
    "wear": ["–Ω–æ—Å–∏—Ç–∏ –æ–¥—è–≥"],
    "win": ["–≤–∏–≥—Ä–∞–≤–∞—Ç–∏"],
    "write": ["–ø–∏—Å–∞—Ç–∏"],
    "look": ["–≥–ª—è–Ω—É—Ç–∏"],
    "use": ["–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏"],
    "want": ["—Ö–æ—Ç—ñ—Ç–∏"],
    "work": ["–ø—Ä–∞—Ü—é–≤–∞—Ç–∏"],
    "call": ["–¥–∑–≤–æ–Ω–∏—Ç–∏"],
    "try": ["—Å–ø—Ä–æ–±—É–≤–∞—Ç–∏"],
    "ask": ["–∑–∞–ø–∏—Ç–∞—Ç–∏"],
    "need": ["–ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏"],
    "seem": ["–∑–¥–∞—î—Ç—å—Å—è"],
    "turn": ["–ø–æ–≤–µ—Ä—Ç–∞—Ç–∏"],
    "follow": ["—Å–ª—ñ–¥—É–≤–∞—Ç–∏"],
    "help": ["–¥–æ–ø–æ–º–∞–≥–∞—Ç–∏"],
    "start": ["–ø–æ—á–∏–Ω–∞—Ç–∏"],
    "run": ["–±—ñ–≥–∞—Ç–∏"],
    "move": ["—Ä—É—Ö–∞—Ç–∏—Å—è"],
    "believe": ["–≤—ñ—Ä–∏—Ç–∏"],
    "set": ["–≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏"],
    "allow": ["–¥–æ–∑–≤–æ–ª—è—Ç–∏"],
    "live": ["–∂–∏—Ç–∏"],
    "happen": ["—Ç—Ä–∞–ø–ª—è—Ç–∏—Å—è"],
    "carry": ["–Ω–µ—Å—Ç–∏"],
    "talk": ["—Ä–æ–∑–º–æ–≤–ª—è—Ç–∏", "–≥–æ–≤–æ—Ä–∏—Ç–∏"],
    "appear": ["–∑'—è–≤–ª—è—Ç–∏—Å—è"],
    "offer": ["–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏"],
    "expect": ["–æ—á—ñ–∫—É–≤–∞—Ç–∏"],
    "suggest": ["–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏"],
    "continue": ["–ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏"],
    "add": ["–¥–æ–¥–∞–≤–∞—Ç–∏"]
}

def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ üîÅ", callback_data="skip")]
    ])

async def send_new_word(update, context):
    word = random.choice(list(words.keys()))
    context.user_data["current_word"] = word
    await update.message.reply_text(
        f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–æ: {word}",
        reply_markup=get_keyboard()
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_new_word(update, context)

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text.strip().lower()
    word = context.user_data.get("current_word")

    if not word:
        await send_new_word(update, context)
        return

    correct = [w.lower() for w in words.get(word, [])]

    if user_answer in correct:
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {', '.join(words[word])}")

    await asyncio.sleep(1)
    await send_new_word(update, context)

async def skip_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    word = context.user_data.get("current_word")
    if word:
        await query.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {', '.join(words[word])}")

    await asyncio.sleep(1)
    new_word = random.choice(list(words.keys()))
    context.user_data["current_word"] = new_word
    await query.message.reply_text(f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–æ: {new_word}", reply_markup=get_keyboard())

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))
    app.add_handler(CallbackQueryHandler(skip_word, pattern="^skip$"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
